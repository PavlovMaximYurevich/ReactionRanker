import re
from typing import List

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards import ADMIN_KEYBOARD

from orm_query import (orm_get_all_statistics,
                       orm_get_statistics_day,
                       orm_get_statistics_week,
                       orm_get_statistics_custom)
from orm_top_messages import orm_all_get_top_messages

router = Router()


class AddDate(StatesGroup):
    start_period = State()
    end_period = State()


async def check_date(message: Message):
    r = re.search(r'\b\d{4}-\d{2}-\d{2}\b', message.text)
    if not r:
        await message.answer(
            "–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        return False
    return True


async def truncate_last_name(first_name: str,
                             last_name: str,
                             ) -> str:
    if last_name is None:
        return f'{first_name}'
    else:
        return f'{first_name} {last_name}'


async def text_message_sheduler(array: List) -> str:
    if array:
        ind = 1
        msg = '‚≠êÔ∏è –î—Ä—É–∑—å—è, —Ö–æ—á—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n'
        max_user = 10
        if len(array) > max_user:
            array = array[:max_user]
        for id_user, name, surname, count_reactions in array:
            if ind == 1:
                link = f'ü•á <a href="tg://user?id={id_user}">{await truncate_last_name(name, surname)}</a>'
                msg += f'{link} - {count_reactions}\n'
            elif ind == 2:
                link = f'ü•à <a href="tg://user?id={id_user}">{await truncate_last_name(name, surname)}</a>'
                msg += f'{link} - {count_reactions}\n'
            elif ind == 3:
                link = f'ü•â <a href="tg://user?id={id_user}">{await truncate_last_name(name, surname)}</a>'
                msg += f'{link} - {count_reactions}\n'
            else:
                link = f' {ind}.  <a href="tg://user?id={id_user}">{await truncate_last_name(name, surname)}</a>'
                msg += f'{link} - {count_reactions}\n'
            ind += 1
        return msg
    return "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"


async def output_text(array: List, message: Message):
    if array:
        ind = 1
        msg = ''
        max_user = 10
        if len(array) > max_user:
            array = array[:max_user]
        for id_user, name, surname, count_reactions in array:
            if ind == 1:
                link = f'ü•á <a href="tg://user?id={id_user}">{await truncate_last_name(name, surname)}</a>'
                msg += f'{link} - {count_reactions}\n'
            elif ind == 2:
                link = f'ü•à <a href="tg://user?id={id_user}">{await truncate_last_name(name, surname)}</a>'
                msg += f'{link} - {count_reactions}\n'
            elif ind == 3:
                link = f'ü•â <a href="tg://user?id={id_user}">{await truncate_last_name(name, surname)}</a>'
                msg += f'{link} - {count_reactions}\n'
            else:
                link = f'{ind}.  <a href="tg://user?id={id_user}">{await truncate_last_name(name, surname)}</a>'
                msg += f'{link} - {count_reactions}\n'
            ind += 1

        await message.answer(
            f'–¢–æ–ø —é–∑–µ—Ä–æ–≤: \n{msg}',
            parse_mode=ParseMode.HTML
        )

    else:
        await message.answer("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")


@router.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=ADMIN_KEYBOARD,
    )


# @router.message(F.text =='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è')
# async def message_statistics(message: Message):
#     await message.answer(
#         text="–í—ã–±–µ—Ä–∏",
#         reply_markup=MESSAGES_KB,
#     )


@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è')
async def get_all_statistics(message: Message, session: AsyncSession):
    total = await orm_get_all_statistics(session)
    # print(total)
    print('–≠–¢–û –í–°–ï –†–ï–ê–ö–¶–ò–ò')
    await output_text(total, message)


@router.message(F.text == '–ó–∞ –¥–µ–Ω—å')
async def get_statistics_day(message: Message, session: AsyncSession):
    total = await orm_get_statistics_day(session)
    await output_text(total, message)


@router.message(F.text == '–ó–∞ –Ω–µ–¥–µ–ª—é')
async def get_statistics_week(message: Message, session: AsyncSession):
    total = await orm_get_statistics_week(session)
    print('–≠–¢–û –†–ï–ê–ö–¶–ò–ò –ó–ê –ù–ï–î–ï–õ–Æ')
    await output_text(total, message)


@router.message(StateFilter(None), F.text == '–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥')
async def get_statistics_add_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 2024-03-26)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddDate.start_period)


@router.message(AddDate.start_period, F.text)
async def get_statistics_add_end(message: Message,
                                 state: FSMContext,
                                 ):
    if not await check_date(message):
        return
    await state.update_data(start_period=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è(–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 2024-03-26)"
    )
    await state.set_state(AddDate.end_period)


@router.message(AddDate.start_period)
async def check_start(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")


@router.message(AddDate.end_period, F.text)
async def finish(message: Message,
                 state: FSMContext,
                 session: AsyncSession
                 ):
    if not await check_date(message):
        return
    await state.update_data(end_period=message.text)
    user_data = await state.get_data()
    print('USER_DATA', user_data)

    total = await orm_get_statistics_custom(session,
                                            user_data.get('start_period'),
                                            user_data.get('end_period'))
    print('–≠–¢–û –†–ï–ê–ö–¶–ò–ò –ó–ê –í–´–ë–†–ê–ù–ù–´–ô –ü–ï–†–ò–û–î')
    await output_text(total, message)

    await state.clear()


@router.message(AddDate.end_period)
async def check_finish(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")


# @router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
# async def get_all_top_messages(message: Message, session: AsyncSession):
#     total = await orm_all_get_top_messages(session)
#     print(total)
#     print('–≠–¢–û –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø')
#     # await output_text(total, message)
#     # print(total[0][0])
#     await bot.send_message(chat_id='-1002084425436', text='–¢–µ—Å—Ç', reply_to_message_id=total[0][0])
